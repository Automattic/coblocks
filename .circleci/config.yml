workflows:
  version: 2.1
  main:
    jobs:
      # Support PHP Versions
      # http://php.net/supported-versions.php
      - php56:
          filters:
            tags:
              only: /^(?!canary).*$/
      - php73:
          filters:
            tags:
              only: /^(?!canary).*$/
      - jest:
          filters:
            tags:
              only: /^(?!canary).*$/
      - e2e:
          filters:
            tags:
              only: /^(?!canary).*$/
      - canary-release:
          filters:
            branches:
              only: master
      - i18n:
          filters:
            branches:
              only: master
      - deploy:
          requires:
            - php56
            - php73
            - jest
            - e2e
          filters:
            tags:
              only: /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(-(0|[1-9][0-9]*)(\.(0|[1-9][0-9]*))*)?(\+[0-9-]+(\.[0-9]+)*)?/ # Run on semantic version tags only
            branches:
              ignore: /.*/

version: 2.1
jobs:
  php56:
    docker:
      - image: circleci/php:5.6-node
      - image: circleci/mysql:5.7
    steps:
      - checkout
      - run:
          name: Disable Xdebug
          command: sudo rm /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
      - run:
          name: "Setup Environment Variables"
          command: |
            echo "export PATH=$HOME/.composer/vendor/bin:$PATH" >> $BASH_ENV
            source /home/circleci/.bashrc
      - run:
          name: Skip Cypress
          command: npm uninstall cypress
      - restore_cache:
          name: Restore Cache
          keys:
            - node-cache-no-cypress-{{ checksum "package-lock.json" }}
            - php56-composer-cache-{{ checksum "composer-lock.json" }}
      - run:
          name: Install Node Modules
          command: |
            if [ ! -d node_modules ]; then
              sudo npm install -g npm@latest
              npm ci
            fi
      - save_cache:
          key: node-cache-no-cypress-{{ checksum "package-lock.json" }}
          paths:
            - ~/.npm
            - node_modules
      - save_cache:
          key: php56-composer-cache-{{ checksum "composer-lock.json" }}
          paths:
            - ~/.composer
            - vendor
      - run:
          name: Install WP-CLI
          command: |
            curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
            chmod +x wp-cli.phar
            sudo mv wp-cli.phar /usr/local/bin/wp
      - run:
          name: Build the Plugin
          command: |
            ./node_modules/.bin/grunt build
      - run:
          name: "Install Test Dependencies"
          command: |
            bash .dev/bin/install-dependencies.sh
            cp -a $HOME/project /tmp/wordpress/wp-content/plugins/coblocks
      - run:
          name: "Run PHPCS"
          command: composer run lint -- -v
      - run:
          name: "Run PHPUnit - Single Site - Generate Coverage Reports"
          command: composer run test -- --coverage-html=/tmp/artifacts/code-coverage/phpunit/html --log-junit=/tmp/artifacts/code-coverage/phpunit/results.xml
          working_directory: /tmp/wordpress/wp-content/plugins/coblocks
      - store_artifacts:
          path: /tmp/artifacts/code-coverage/
          destination: phpunit-coverage
      - store_test_results:
          path: /tmp/artifacts/code-coverage/
      - run:
          name: "Run PHPUnit - Multi Site"
          command: WP_MULTISITE=1 composer run test
          working_directory: /tmp/wordpress/wp-content/plugins/coblocks

  php73:
    docker:
      - image: circleci/php:7.3-node
      - image: circleci/mysql:5.7
    steps:
      - checkout
      - run:
          name: Disable Xdebug
          command: sudo rm /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
      - run:
          name: "Setup Environment Variables"
          command: |
            echo "export PATH=$HOME/.composer/vendor/bin:$PATH" >> $BASH_ENV
            source /home/circleci/.bashrc
      - run:
          name: Skip Cypress
          command: npm uninstall cypress
      - restore_cache:
          name: Restore Cache
          keys:
            - node-cache-no-cypress-{{ checksum "package-lock.json" }}
            - php73-composer-cache-{{ checksum "composer-lock.json" }}
      - run:
          name: Install Node Modules
          command: |
            if [ ! -d node_modules ]; then
              sudo npm install -g npm@latest
              npm ci
            fi
      - save_cache:
          key: node-cache-no-cypress-{{ checksum "package-lock.json" }}
          paths:
            - ~/.npm
            - node_modules
      - save_cache:
          key: php73-composer-cache-{{ checksum "composer-lock.json" }}
          paths:
            - ~/.composer
            - vendor
      - run:
          name: Install WP-CLI
          command: |
            curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
            chmod +x wp-cli.phar
            sudo mv wp-cli.phar /usr/local/bin/wp
      - run:
          name: Build the Plugin
          command: |
            ./node_modules/.bin/grunt build
      - run:
          name: "Install Test Dependencies"
          command: |
            bash .dev/bin/install-dependencies.sh
            cp -a $HOME/project /tmp/wordpress/wp-content/plugins/coblocks
      - run:
          name: "Run PHPCS"
          command: composer run lint -- -v
      - run:
          name: "Run PHPUnit - Single Site - Generate Coverage Reports"
          command: composer run test -- --coverage-html=/tmp/artifacts/code-coverage/phpunit/html --log-junit=/tmp/artifacts/code-coverage/phpunit/results.xml
          working_directory: /tmp/wordpress/wp-content/plugins/coblocks
      - store_artifacts:
          path: /tmp/artifacts/code-coverage/
          destination: phpunit-coverage
      - store_test_results:
          path: /tmp/artifacts/code-coverage/
      - run:
          name: "Run PHPUnit - Multi Site"
          command: WP_MULTISITE=1 composer run test
          working_directory: /tmp/wordpress/wp-content/plugins/coblocks

  jest:
    docker:
      - image: circleci/node:latest
    steps:
      - checkout
      - run:
          name: Skip Cypress
          command: npm uninstall cypress
      - restore_cache:
          name: Restore Cache
          keys:
            - node-cache-no-cypress-{{ checksum "package-lock.json" }}
      - run:
          name: Install Node Modules
          command: |
            if [ ! -d node_modules ]; then
              sudo npm install -g npm@latest
              npm ci
            fi
      - save_cache:
          key: node-cache-no-cypress-{{ checksum "package-lock.json" }}
          paths:
            - ~/.npm
            - node_modules
      - run:
          name: Run ESLint
          command: npx grunt eslint
      - run:
          name: Run Jest Tests
          command: JEST_JUNIT_OUTPUT_DIR="/tmp/artifacts/code-coverage/jest/" JEST_JUNIT_OUTPUT_NAME="results.xml" npm test -- --ci --runInBand --reporters="default" --reporters="jest-junit" --coverage --coverageDirectory=/tmp/artifacts/code-coverage/jest/html
      - store_artifacts:
          path: /tmp/artifacts/code-coverage/
          destination: jest-coverage
      - store_test_results:
          path: /tmp/artifacts/code-coverage/

  e2e:
    docker:
      - image: circleci/php:latest-node-browsers
      - image: circleci/mysql:5.7
    parallelism: 4
    steps:
      - checkout
      - run:
          name: Setup spec files to run based on git diff-tree
          command: bash .dev/bin/setup-test-specs.sh
      - run:
          name: Disable Xdebug
          command: sudo rm /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
      - run:
          name: Update Hosts
          command: echo 127.0.0.1 coblocks.test | sudo tee -a /etc/hosts
      - restore_cache:
          name: Restore Cache
          keys:
            - node-cache-{{ checksum "package-lock.json" }}
            - composer-cache-{{ checksum "composer-lock.json" }}
      - run:
          name: Install Node Modules
          command: |
            if [ ! -d node_modules ]; then
              sudo npm install -g npm@latest
              npm ci
            fi
      - save_cache:
          key: node-cache-{{ checksum "package-lock.json" }}
          paths:
            - ~/.npm
            - node_modules
      - save_cache:
          key: composer-cache-{{ checksum "composer-lock.json" }}
          paths:
            - ~/.composer
            - vendor
      - run:
          name: Install WP-CLI
          command: |
            curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
            chmod +x wp-cli.phar
            sudo mv wp-cli.phar /usr/local/bin/wp
      - run:
          name: "Install Test Dependencies"
          command: |
            bash .dev/bin/install-dependencies.sh
            cp -a $HOME/project /tmp/wordpress/wp-content/plugins/coblocks
      - run:
          name: Build the Plugin
          command: |
            ./node_modules/.bin/grunt build
            cp -a ./build/coblocks /tmp/wordpress/wp-content/plugins/
      - run:
          name: "Install WordPress"
          command: |
            wp config create --dbhost=127.0.0.1 --dbname=coblocks --dbuser=root --dbpass=''
            wp core install --url="http://coblocks.test" --title=CoBlocks --admin_user=admin --admin_password=password --admin_email=test@admin.com --skip-email
            wp plugin activate coblocks
          path: /tmp/wordpress
      - run:
          name: "Start WP-CLI Server"
          command: sudo wp server --host=0.0.0.0 --port=80 --allow-root
          path: /tmp/wordpress
          background: true
      - run:
          name: "Run E2E Tests (Cypress.io)"
          command: |
            touch .dev/tests/cypress/wp_creds.json
            echo '{"wpUsername":"admin","wpPassword":"password","testURL":"http://coblocks.test"}' | jq . > .dev/tests/cypress/wp_creds.json
            ./node_modules/.bin/cypress run --config integrationFolder=./ --browser chrome --record --parallel --spec "$(cat /tmp/specstring)"
          path: /tmp/wordpress/wp-content/plugins/coblocks

  i18n:
    docker:
      - image: circleci/php:latest-node
    steps:
      - add_ssh_keys:
          fingerprints:
            - "14:ee:bc:31:0f:50:7e:fe:8b:56:87:f8:56:db:48:5b"
      - checkout
      - run:
          name: Disable Xdebug
          command: sudo rm /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
      - run:
          name: Skip Cypress
          command: npm uninstall cypress
      - restore_cache:
          name: Restore Cache
          keys:
            - node-cache-no-cypress-{{ checksum "package-lock.json" }}
      - run:
          name: Install Node Modules
          command: |
            if [ ! -d node_modules ]; then
              sudo npm install -g npm@latest
              npm ci
            fi
      - save_cache:
          key: node-cache-no-cypress-{{ checksum "package-lock.json" }}
          paths:
            - ~/.npm
            - node_modules
      - run:
          name: Install gettext
          command: sudo apt-get install gettext
      - run:
          name: Install WP-CLI
          command: |
            curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
            chmod +x wp-cli.phar
            sudo mv wp-cli.phar /usr/local/bin/wp
      - run:
          name: Generate POT
          command: |
            mv ../project ../coblocks
            npm run babel:build
      - run:
          name: Push POT to GitHub
          command: |
            export GIT_COMMIT_DESC=$(git log --format=oneline -n 1 $CIRCLE_SHA1)
            if [[ $GIT_COMMIT_DESC != *"skip i18n"* ]]; then
              git config --global user.email "plugins@godaddy.com"
              git config --global user.name "GoDaddy Translator"
              git add languages/coblocks.json
              git add languages/coblocks.pot
              git commit -m "Update coblocks.pot/coblocks.json files [skip i18n]"
              git push origin master --quiet
            fi
          path: ~/coblocks

  canary-release:
    docker:
      - image: circleci/php:latest-node
    steps:
      - add_ssh_keys:
          fingerprints:
            - "0e:f8:0a:19:88:42:c3:5a:b9:82:17:34:6b:40:68:21"
      - checkout
      - run:
          name: Update known_hosts
          command: ssh-keyscan -H a90.8f7.myftpupload.com >> ~/.ssh/known_hosts
      - run:
          name: Disable Xdebug
          command: sudo rm /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
      - run:
          name: Skip Cypress
          command: npm uninstall cypress
      - restore_cache:
          name: Restore Cache
          keys:
            - node-cache-no-cypress-{{ checksum "package-lock.json" }}
            - composer-cache-{{ checksum "composer-lock.json" }}
      - run:
          name: Install Node Modules
          command: |
            if [ ! -d node_modules ]; then
              sudo npm install -g npm@latest
              npm ci
            fi
      - save_cache:
          key: node-cache-no-cypress-{{ checksum "package-lock.json" }}
          paths:
            - ~/.npm
            - node_modules
      - save_cache:
          key: composer-cache-{{ checksum "composer-lock.json" }}
          paths:
            - ~/.composer
            - vendor
      - run:
          name: Install Grunt.js
          command: sudo npm install -g grunt-cli
      - run:
          name: Install gettext
          command: sudo apt-get install gettext
      - run:
          name: Install GHR
          command: |
            curl -o ghr.tar.gz -SL https://github.com/tcnksm/ghr/releases/download/v0.13.0/ghr_v0.13.0_linux_amd64.tar.gz
            mkdir -p /tmp/ghr
            tar -xzf ghr.tar.gz --strip 1 -C /tmp/ghr
            chmod +x /tmp/ghr/ghr
            sudo mv /tmp/ghr/ghr /usr/local/bin/ghr
      - run:
          name: Install WP-CLI
          command: |
            curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
            chmod +x wp-cli.phar
            sudo mv wp-cli.phar /usr/local/bin/wp
      - run:
          name: Build the Plugin
          command: |
            mkdir -p /tmp/artifacts
            grunt build
            COBLOCKS_VERSION_LINE=$(awk '/\* Version:/{ print NR; exit }' build/coblocks/class-coblocks.php)
            COBLOCKS_COMMIT_HASH=$(git rev-parse --verify HEAD | head -c 7)
            sed -i -e "${COBLOCKS_VERSION_LINE}s/$/-${COBLOCKS_COMMIT_HASH}/" build/coblocks/class-coblocks.php
            npm run json2po
            npm run po2mo
            npm run po2jed
            rm -f languages/*.po languages/*.pot languages/coblocks.json
            find languages/ -type f ! -name 'coblocks*' -exec rm {} \;
            cp -r languages/ build/coblocks/languages/
            cd build && zip -r coblocks-canary.zip coblocks
            mv coblocks-canary.zip /tmp/artifacts/coblocks-canary.zip
      - run:
          name: Deploy to i18n Staging Site
          command: |
            scp -r /tmp/artifacts/coblocks-canary.zip ${STAGING_SITE_SSH_CREDS}:html/wp-content/
            ssh ${STAGING_SITE_SSH_CREDS} 'cd html/wp-content && wp plugin install coblocks-canary.zip --force --activate --skip-themes --skip-plugins && rm -rf coblocks-canary.zip languages/plugins/coblocks-*'
      - deploy:
          name: Push Canary Release to GitHub
          command: ghr -t ${GH_ACCESS_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -b "Latest build of the master branch. This bleeding edge version is for testing purposes only and should not be used in production." -delete -prerelease -replace canary /tmp/artifacts/coblocks-canary.zip

  deploy:
    docker:
      - image: circleci/php:latest-node
    steps:
      - checkout
      - run:
          name: Disable Xdebug
          command: sudo rm /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
      - run:
          name: Skip Cypress
          command: npm uninstall cypress
      - restore_cache:
          name: Restore Cache
          keys:
            - node-cache-no-cypress-{{ checksum "package-lock.json" }}
            - composer-cache-{{ checksum "composer-lock.json" }}
      - run:
          name: Install Node Modules
          command: |
            if [ ! -d node_modules ]; then
              sudo npm install -g npm@latest
              npm ci
            fi
      - save_cache:
          key: node-cache-no-cypress-{{ checksum "package-lock.json" }}
          paths:
            - ~/.npm
            - node_modules
      - save_cache:
          key: composer-cache-{{ checksum "composer-lock.json" }}
          paths:
            - ~/.composer
            - vendor
      - run:
          name: Install Grunt.js
          command: sudo npm install -g grunt-cli
      - run:
          name: Install SVN
          command: sudo apt-get update && sudo apt-get install subversion
      - run:
          name: Install gettext
          command: sudo apt-get install gettext
      - run:
          name: Install WP-CLI
          command: |
            curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
            chmod +x wp-cli.phar
            sudo mv wp-cli.phar /usr/local/bin/wp
      - run:
          name: Install GHR
          command: |
            curl -o ghr.tar.gz -SL https://github.com/tcnksm/ghr/releases/download/v0.13.0/ghr_v0.13.0_linux_amd64.tar.gz
            mkdir -p /tmp/ghr
            tar -xzf ghr.tar.gz --strip 1 -C /tmp/ghr
            chmod +x /tmp/ghr/ghr
            sudo mv /tmp/ghr/ghr /usr/local/bin/ghr
      - run:
          name: Build the Plugin
          command: |
            mkdir -p /tmp/artifacts
            grunt build
            grunt compress
            mv build/*.zip /tmp/artifacts
      - deploy:
          name: Deploy the Plugin to WordPress.org
          command: bash .dev/bin/deploy-plugin.sh
      - store_artifacts:
          path: /tmp/artifacts
